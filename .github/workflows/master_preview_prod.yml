name: "preview@prod"

on:
  workflow_dispatch:
permissions:
  contents: write # Minimal permissions for checkout
  
jobs:
  CheckUser:
    runs-on: ubuntu-latest
    steps:
      - name: Check if user is allowed to run this workflow
        run: |
          echo "Triggered by: ${{ github.actor }}"
          if [ "${{ github.actor }}" != "josef0xb" ]; then
            echo "❌ You are not allowed to run this workflow."
            exit 1
          fi

  DeployToServer:
    needs: CheckUser
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.event_name }}
      cancel-in-progress: true
    steps:
      - name: Set up WireGuard
        env:
          WG_CONFIG: ${{secrets.WG_CONFIG}}

        run: |
          set -e
          sudo apt update
          sudo apt install -y wireguard
          echo "$WG_CONFIG" | sudo tee /etc/wireguard/wg0.conf
          sudo wg-quick up wg0

      - uses: actions/checkout@v5
      
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: |
          set -e
          mkdir -p ~/.ssh
          ssh-keyscan -H -t ecdsa,ed25519,rsa 10.0.0.1 >> ~/.ssh/known_hosts
        # Alternatively, store known_hosts as a secret and use it

      - name: Set Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 22.19.0
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Install dependencies and build
        env:
          VITE_APP_VERSION: ${{ github.run_number }}
          VITE_APP_CONFIG: preview-prod
          VITE_APP_BLOCKFROST_KEY: ${{ secrets.BLOCKFROST_API_PREVIEW }}

        run: |
          set -e
          yarn install
          yarn build
      - name: Copy files & deploy
        env:
          SERVER: 10.0.0.1
        run: |
          set -e
          rsync -azv -e "ssh -o UserKnownHostsFile=~/.ssh/known_hosts -o HostKeyAlgorithms=ecdsa-sha2-nistp256,ssh-ed25519,rsa-sha2-512" \
            --omit-dir-times --no-perms --no-owner --no-group --delete \
            ./dist/ job@$SERVER:/var/www/cexplorer_preview/

      - name: Tag this commit
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          WORKFLOW_NAME: ${{ github.workflow }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          TAG_NAME="preview@prod-v${{ github.run_number }}"
          git tag -f "$TAG_NAME"

          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git
          git push -f origin "$TAG_NAME"

      - name: Get previous tag SHA
        id: previous
        run: |
          PREVIOUS_TAG=$(git tag --list "preview@prod-*" --sort=-creatordate | sed -n '2p')
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, using root commit"
            PREVIOUS_SHA=$(git rev-list --max-parents=0 HEAD)
          else
            echo "Found previous tag: $PREVIOUS_TAG"
            PREVIOUS_SHA=$(git rev-list -n 1 "$PREVIOUS_TAG")
          fi
          echo "previous_sha=$PREVIOUS_SHA" >> "$GITHUB_OUTPUT"

      - name: Get PRs between builds
        id: pr_list
        run: |
          CURRENT_SHA=$(git rev-parse HEAD)
          PREVIOUS_SHA="${{ steps.previous.outputs.previous_sha }}"
          echo "Comparing commits between $PREVIOUS_SHA and $CURRENT_SHA"

          PR_LIST=$(git log --merges --pretty=format:"- %s (%h)" "$PREVIOUS_SHA..$CURRENT_SHA" | grep -E "Merge pull request" || echo "No PRs found")
          echo "pr_list<<EOF" >> "$GITHUB_OUTPUT"
          echo "$PR_LIST" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Notify Discord
        if: success()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          VERSION="${{ github.run_number }}"
          WORKFLOW_NAME="${{ github.workflow }}"
          PR_LIST="${{ steps.pr_list.outputs.pr_list }}"

          PR_LIST_ESCAPED=$(echo "$PR_LIST" | sed ':a;N;$!ba;s/\n/\\n/g')

          MESSAGE="🚀 **${WORKFLOW_NAME}** deployed new version #**${VERSION}**!\n\n**Included PRs:**\n$PR_LIST_ESCAPED"

          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"$MESSAGE\"}" \
            $DISCORD_WEBHOOK_URL
